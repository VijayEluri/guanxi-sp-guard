/**
 * 
 */
package org.guanxi.sp.guard;

import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyStore;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.axis.encoding.Base64;
import org.guanxi.common.definitions.Guanxi;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

/**
 * This is a Controller that will display the Shibboleth SP metadata to the 
 * recipient. This is intended to be used by IdPs in order to load the SP
 * metadata.
 * 
 * @author matthew
 *
 */
public class SPMetadataService extends AbstractController {
  /**
   * Used to store the entityID in the ModelAndView generated by this controller.
   */
  public static final String entityIDKey           = "entityID";
  /**
   * Used to store the Assertion Consumer Service URL in the ModelAndView generated by this controller.
   */
  public static final String acsURLKey             = "acsURL";
  /**
   * Used to store the Signing Certificate in the ModelAndView generated by this controller.
   */
  public static final String signingCertificateKey = "signingCertificate";

  /**
   * This collects the required data and passes it back in the ModelAndView object.
   * This is then displayed in the appropriate format by the jsp page which handles
   * this.
   */
  @Override
  protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
    org.guanxi.xal.sp.GuardDocument.Guard guard;
    InputStream                           in;
    KeyStore                              keystore;
    ModelAndView                          result;
    String                                entityID, acsURL, signingCertificate;
    
    // This needs to collect the following information
    // 1) The signing certificate
    // 2) The Assertion Consumer Service binding
    // 3) The entity ID
    // in order for the SP metadata to be generated
    
    guard    = (org.guanxi.xal.sp.GuardDocument.Guard)getServletContext().getAttribute(Guanxi.CONTEXT_ATTR_GUARD_CONFIG);
    entityID = guard.getGuardInfo().getID();
    acsURL   = guard.getEngineInfo().getAuthConsumerURL();

    // load the truststore
    keystore = KeyStore.getInstance("jks");
    in       = new FileInputStream(guard.getKeystore());
    try {
      keystore.load(in, guard.getKeystorePassword().toCharArray());
    }
    finally {
      in.close();
    }
    signingCertificate = Base64.encode(keystore.getCertificate(entityID).getEncoded());
    
    result = new ModelAndView();
    result.addObject(entityIDKey,           entityID);
    result.addObject(acsURLKey,             acsURL);
    result.addObject(signingCertificateKey, signingCertificate);
    
    return result;
  }
}
